import * as XLSX from 'xlsx';
import { Tool, ReportType, ToolTag } from '../../shared/schema.js';

interface ExportData {
    tools: Tool[];
    reportType: ReportType;
    tags: ToolTag[];
    startDate?: string;
    endDate?: string;
    generatedBy: string;
    generatedAt: Date;
}

export function generateCSV(data: ExportData): string {
    const { tools, tags } = data;

    // Filter tools based on tags if specified
    const filteredTools = tags.length > 0
        ? tools.filter(tool => tags.includes(tool.status as ToolTag))
        : tools;

    // Create CSV headers
    const headers = [
        'Tool ID',
        'Name',
        'Category',
        'Status',
        'Location',
        'Description',
        'Last Updated'
    ];

    // Create CSV rows
    const rows = filteredTools.map(tool => [
        tool.tool_id,
        tool.name,
        tool.category,
        tool.status,
        tool.location || '',
        tool.description || '',
        new Date(tool.last_updated).toLocaleDateString()
    ]);

    // Combine headers and rows
    const csvData = [headers, ...rows];

    // Convert to CSV string
    return csvData.map(row =>
        row.map(cell => `"${ cell }"`).join(',')
    ).join('\n');
}

export function generateExcel(data: ExportData): Buffer {
    const { tools, tags, reportType, generatedBy, generatedAt } = data;

    // Filter tools based on tags if specified
    const filteredTools = tags.length > 0
        ? tools.filter(tool => tags.includes(tool.status as ToolTag))
        : tools;

    // Create workbook
    const wb = XLSX.utils.book_new();

    // Create summary worksheet
    const summaryData = [
        ['Wireline Inventory Report'],
        [''],
        ['Report Type:', getReportTypeLabel(reportType)],
        ['Generated By:', generatedBy],
        ['Generated On:', generatedAt.toLocaleDateString()],
        ['Status Filter:', tags.length > 0 ? tags.map(t => t.charAt(0).toUpperCase() + t.slice(1)).join(', ') : 'All Statuses'],
        ['Total Tools:', filteredTools.length],
        [''],
        ['Status Summary:'],
        ['Red (Critical):', filteredTools.filter(t => t.status === 'red').length],
        ['Yellow (Warning):', filteredTools.filter(t => t.status === 'yellow').length],
        ['Green (Good):', filteredTools.filter(t => t.status === 'green').length],
        ['White (Inactive):', filteredTools.filter(t => t.status === 'white').length],
    ];

    const summaryWs = XLSX.utils.aoa_to_sheet(summaryData);
    XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');

    // Create tools data worksheet
    const toolsData = [
        ['Tool ID', 'Name', 'Category', 'Status', 'Location', 'Description', 'Last Updated'],
        ...filteredTools.map(tool => [
            tool.tool_id,
            tool.name,
            tool.category,
            tool.status,
            tool.location || '',
            tool.description || '',
            new Date(tool.last_updated).toLocaleDateString()
        ])
    ];

    const toolsWs = XLSX.utils.aoa_to_sheet(toolsData);
    XLSX.utils.book_append_sheet(wb, toolsWs, 'Tools Data');

    // Generate buffer
    return XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });
}

function getReportTypeLabel(reportType: ReportType): string {
    switch (reportType) {
        case 'tag-status':
            return 'Tag Status Report';
        case 'maintenance':
            return 'Maintenance Report';
        case 'inventory':
            return 'Inventory Summary';
        default:
            return 'General Report';
    }
}
